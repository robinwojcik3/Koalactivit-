*** Begin Patch
*** Update File: Data scraping/Biodiv'AURA scraping script.py
@@
-import re, time
-from pathlib import Path
-import pandas as pd
+import re, time, sys
+from pathlib import Path
+import pandas as pd
@@
-ROOT = "https://donnees.biodiversite-auvergne-rhone-alpes.fr/"
-URL  = ROOT + "#/synthese"
+ROOT = "https://donnees.biodiversite-auvergne-rhone-alpes.fr/"
+URL  = ROOT + "#/synthese"
@@
-# Identifiants
-AURA_USERNAME = "Robin Wojcik"
-AURA_PASSWORD = "Vd8AfZ2Hlwx6SIvc09FQ"
+# Identifiants (gérés ici comme constantes, idéalement à externaliser)
+AURA_USERNAME = "Robin Wojcik"
+AURA_PASSWORD = "Vd8AfZ2Hlwx6SIvc09FQ"
@@
-# Chemins
-EXCEL_PATH   = r"C:\Users\utilisateur\Mon Drive\1 - Bota & Travail\\+++++++++  BOTA  +++++++++\\---------------------- 3) BDD\PYTHON\0) Scripts Python\Koalactivit-\Taxons Koala.xlsx"
-DOWNLOAD_DIR = r"C:\Users\utilisateur\Mon Drive\1 - Bota & Travail\\+++++++++  BOTA  +++++++++\\---------------------- 3) BDD\PYTHON\0) Scripts Python\Koalactivit-\Data scraping"
+# Chemins (référencés relativement au dépôt)
+REPO_ROOT    = Path(__file__).resolve().parents[1]
+TXT_PATH     = REPO_ROOT / "Taxons Koala.txt"
+DOWNLOAD_DIR = REPO_ROOT / "OUTPUT SHAPEFILE"
@@
-DEPARTEMENT_TEXTE = "Isere"  # mets "Is??re" si n?cessaire
+DEPARTEMENT_TEXTE = "Isere"  # mets "Isère" si nécessaire
@@
-def build_driver(download_dir:str)->webdriver.Chrome:
+def build_driver(download_dir:str)->webdriver.Chrome:
     ensure_dir(download_dir)
     opts = Options()
-    opts.add_argument("--start-maximized")
+    # Headless pour aller plus vite et consommer moins
+    opts.add_argument("--headless=new")
+    opts.add_argument("--window-size=1920,1080")
+    opts.add_argument("--start-maximized")
     opts.add_argument("--lang=fr-FR")
     opts.add_argument("--disable-extensions")
     opts.add_argument("--disable-infobars")
     opts.add_argument("--disable-gpu")
+    opts.add_argument("--no-sandbox")
+    opts.add_argument("--disable-dev-shm-usage")
+    opts.add_argument("--disable-notifications")
+    opts.add_argument("--blink-settings=imagesEnabled=false")
+    opts.add_argument("--disable-blink-features=AutomationControlled")
     opts.page_load_strategy = "eager"  # plus rapide
     # bloque les images pour acc?l?rer l??TUI
     prefs = {
-        "download.default_directory": str(Path(download_dir).resolve()),
+        "download.default_directory": str(Path(download_dir).resolve()),
         "download.prompt_for_download": False,
         "download.directory_upgrade": True,
         "safebrowsing.enabled": True,
         "profile.default_content_setting_values.automatic_downloads": 1,
         "profile.managed_default_content_settings.images": 2,
     }
     opts.add_experimental_option("prefs", prefs)
     service = Service(ChromeDriverManager().install())
     driver = webdriver.Chrome(service=service, options=opts)
+    # Assure les téléchargements en headless
+    try:
+        driver.execute_cdp_cmd("Page.setDownloadBehavior", {"behavior": "allow", "downloadPath": str(Path(download_dir).resolve())})
+    except Exception:
+        pass
     return driver
@@
-def get_species(xlsx:str, n=151):
-    df = pd.read_excel(xlsx, header=None, usecols=[0], nrows=n)
-    out=[]
-    for v in df.iloc[:,0].tolist():
-        if isinstance(v,str) and v.strip(): out.append(v.strip())
-        elif pd.notna(v): out.append(str(v).strip())
-    return out
+def get_species_from_txt(txt_path:Path):
+    if not txt_path.exists():
+        raise FileNotFoundError(f"Fichier introuvable: {txt_path}")
+    out = []
+    with txt_path.open('r', encoding='utf-8-sig') as f:
+        for line in f:
+            s = line.strip()
+            if not s:
+                continue
+            if s.startswith('#') or s.startswith('//'):
+                continue
+            out.append(s)
+    return out
@@
 def set_taxon(driver, taxon:str):
     el = click_quick(driver, By.ID, "taxonInput", 15)
     el.send_keys(Keys.CONTROL, "a")
     el.send_keys(taxon)
-    time.sleep(2)              # ?tape 4 impos?e
-    el.send_keys(Keys.ENTER)   # ?tape 5 impos?e
+    # Essaye d'attendre une suggestion avant de valider, sinon fallback court
+    try:
+        WebDriverWait(driver, 5).until(EC.presence_of_element_located((By.XPATH, "//div[contains(@class,'ng-option') or contains(@class,'mat-option')]")))
+    except Exception:
+        time.sleep(0.5)
+    el.send_keys(Keys.ENTER)
@@
 def click_telecharger_shapefile(driver):
     click_quick(driver, By.ID, "download-btn", 40)
     click_quick(driver, By.XPATH, "//span[normalize-space()='Format shapefile']", 15)
@@
-def run():
-    ensure_dir(DOWNLOAD_DIR)
-    species = get_species(EXCEL_PATH, 151)
-    if not species: 
-        print("Aucun taxon."); 
-        return
+def run():
+    ensure_dir(DOWNLOAD_DIR)
+    try:
+        species = get_species_from_txt(Path(TXT_PATH))
+    except Exception as e:
+        print(f"Erreur de lecture de la liste d'espèces: {e}")
+        return
+    if not species:
+        print("Aucun taxon.")
+        return
@@
-        for i, taxon in enumerate(species, 1):
+        for i, taxon in enumerate(species, 1):
             print(f"[{i}/{len(species)}] {taxon} ...", end=" ")
             try:
                 close_all_modals(driver)
@@
-                before = set(dl_dir.glob("*"))
+                # Si déjà téléchargé, on saute pour gagner du temps
+                expected_name = sanitize_filename(f"{taxon}")
+                already = list(dl_dir.glob(f"{expected_name}*.zip"))
+                if already:
+                    print(f"SKIP -> déjà présent: {already[0].name}")
+                    ok.append((taxon, str(already[0])))
+                    continue
+
+                before = set(dl_dir.glob("*"))
                 click_telecharger_shapefile(driver)
                 f = wait_new_file(dl_dir, before, timeout=180)
 
                 # renommage
                 target = f.with_name(sanitize_filename(f"{taxon}{f.suffix}"))
                 k=1
                 while target.exists():
                     target = f.with_name(sanitize_filename(f"{taxon} ({k}){f.suffix}")); k+=1
                 f.rename(target)
@@
-    finally:
-        pass  # driver.quit()
+    finally:
+        try:
+            driver.quit()
+        except Exception:
+            pass
*** End Patch